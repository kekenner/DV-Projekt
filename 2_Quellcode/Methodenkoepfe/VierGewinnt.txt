package logic;

/**
 * Die Hauptklasse "VierGewinnt", die das eigentliche Spiel in Standardausführung beinhaltet.
 * @author fabian.eiternik
 *
 */
public class VierGewinnt {
	
	
	/**
	 * Konfiguration, in der man Werte für Zeilen und Spalten wählt und bestätigt. 
	 * Das Spielfeld soll schlussendlich diese gewünschte Anzahlen aufweisen.
	 */
	private Konfiguration konfiguration;
	

	/**
	 * Spieler 1, der beiden Spielteilnehmer.
	 */
	private Spieler spieler1;
	
	
	/**
	 * Spieler 2, der beiden Spielteilnehmer.
	 */
	private Spieler spieler2;
	
	
	/**
	 * Erzeugt das Feld der Schaltfläche, sowie Spieler 1 und Spieler 2. 
	 * Die Konfiguration der Schaltfläche erlaubt der Anwendung das Ändern des Aussehens. 
	 * @param konfiguration
	 * @param spieler1
	 * @param spieler2
	 */
	public VierGewinnt(Konfiguration konfiguration, Spieler spieler1, Spieler spieler2) {
		this.konfiguration = konfiguration;
		this.spieler1 = spieler1;
		this.spieler2 = spieler2;
		// Feld erzeugen, aus den Werten der Konfiguration
	}

	
	/**
	 * Feld wird initialisiert
	 */
	private int[][] feld;
	//2D Array
	
	
	/**
	 * Methode um einen Spielzug zu setzen.
	 * 
	 * @param spalte - Spaltennummer, in die der Stein eingeworfen wurde.
	 * @param spieler - Spieler, der den Zug gemacht hat.
	 * @return "true" - bei einem gültigem Zug und "false" bei ungültigem Zug.
	 */
	public boolean setzeZug(int spalte, Spieler spieler) { return false;}
	
	
	/**
	 * Methode analysiert das Spielfeld - sind alle Spalten des Feldes mit Chips belegt, 
	 * ist das Spiel vorbei und die Methode liefert "false". Ist der Spielzug gültig, geht 
	 * das Spiel weiter.
	 *
	 * @param spalte - Spaltennummer, in die der Stein eingeworfen wurde
	 * @return "true" - bei einem gültigem Zug und "false" bei ungültigem Zug.
	 */
	private boolean gueltigerZug(int spalte) { return false;}
	
	
	/** 
	 * Methode prüft nach jedem Spielzug, wie das Spiel ausgegangen ist (gewonnen oder unentschieden),
	 * von dem eingeworfenen Chip aus in jegliche Richtung ob 4-in-Reihe der selben Farbe geschmissen wurden.
	 * 
	 * @param spieler - Spieler, der den Zug gemacht hat.
	 * @return "true" - bei einem gültigem Zug und "false" bei ungültigem Zug.
	 */
	private boolean hatGewonnen(Spieler spieler, int spalte) { return false;}
	
	
	/**
	 * Gibt die Konfiguration zurück.
	 * @return Konfiguration
	 */
	
	public Konfiguration getKonfiguration() {
		return konfiguration;
	}
	
	
    /**
     * Gibt den Spieler 1 zurück.
     *
     * @return Spieler 1
     * @see logic.Spieler
     */
	public Spieler getSpieler1() {
		return spieler1;
	}
	
	
    /**
     * Gibt den Spieler 2 zurück.
     *
     * @return Spieler 2
     * @see logic.Spieler
     */
	public Spieler getSpieler2() {
		return spieler2;
	}


}